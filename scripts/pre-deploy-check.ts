#!/usr/bin/env tsx
/**
 * Script de verifica√ß√£o pr√©-deploy para prevenir falhas comuns
 */

import { db } from '../server/db';
import { existsSync, mkdirSync } from 'fs';
import { readFileSync } from 'fs';
import path from 'path';

async function checkDatabaseConnection() {
  console.log('üîç Verificando conex√£o com banco de dados...');
  
  if (!process.env.DATABASE_URL) {
    console.error('‚ùå DATABASE_URL n√£o est√° definido');
    return false;
  }

  try {
    // Testa a conex√£o com uma query simples
    await db.execute('SELECT 1');
    console.log('‚úÖ Conex√£o com banco de dados OK');
    return true;
  } catch (error) {
    console.error('‚ùå Erro na conex√£o com banco de dados:', error);
    return false;
  }
}

async function checkRequiredDirectories() {
  console.log('üîç Verificando diret√≥rios necess√°rios...');
  
  const requiredDirs = [
    'uploads',
    'uploads/pdfs',
    'uploads/thumbnails',
    'uploads/avatars',
    'uploads/temp'
  ];

  let allDirsOk = true;
  
  for (const dir of requiredDirs) {
    if (!existsSync(dir)) {
      console.log(`üìÅ Criando diret√≥rio: ${dir}`);
      mkdirSync(dir, { recursive: true });
    }
  }
  
  console.log('‚úÖ Diret√≥rios necess√°rios OK');
  return allDirsOk;
}

async function checkThemeConfiguration() {
  console.log('üîç Verificando configura√ß√£o do tema...');
  
  try {
    const themeFile = 'theme.json';
    if (!existsSync(themeFile)) {
      console.error('‚ùå theme.json n√£o encontrado');
      return false;
    }
    
    const themeContent = readFileSync(themeFile, 'utf8');
    const theme = JSON.parse(themeContent);
    
    // Verifica se tem uma variante v√°lida
    const validVariants = ['default', 'zinc', 'stone', 'gray', 'neutral', 'slate', 'red', 'rose', 'orange', 'green', 'blue', 'yellow', 'violet'];
    
    if (!theme.variant || !validVariants.includes(theme.variant)) {
      console.error('‚ùå Variante do tema inv√°lida:', theme.variant);
      console.log('Variantes v√°lidas:', validVariants.join(', '));
      return false;
    }
    
    console.log('‚úÖ Configura√ß√£o do tema OK');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao verificar configura√ß√£o do tema:', error);
    return false;
  }
}

async function checkEnvironmentVariables() {
  console.log('üîç Verificando vari√°veis de ambiente...');
  
  const requiredEnvVars = [
    'DATABASE_URL',
    'PGHOST',
    'PGPORT',
    'PGUSER',
    'PGPASSWORD',
    'PGDATABASE'
  ];
  
  let allEnvVarsOk = true;
  
  for (const envVar of requiredEnvVars) {
    if (!process.env[envVar]) {
      console.error(`‚ùå Vari√°vel de ambiente ${envVar} n√£o definida`);
      allEnvVarsOk = false;
    }
  }
  
  if (allEnvVarsOk) {
    console.log('‚úÖ Vari√°veis de ambiente OK');
  }
  
  return allEnvVarsOk;
}

async function checkDependencies() {
  console.log('üîç Verificando depend√™ncias cr√≠ticas...');
  
  try {
    // Verifica se o package.json existe
    const packageFile = 'package.json';
    if (!existsSync(packageFile)) {
      console.error('‚ùå package.json n√£o encontrado');
      return false;
    }
    
    const packageContent = readFileSync(packageFile, 'utf8');
    const pkg = JSON.parse(packageContent);
    
    const criticalDeps = [
      'react',
      'express',
      'drizzle-orm',
      '@neondatabase/serverless',
      'pg'
    ];
    
    for (const dep of criticalDeps) {
      if (!pkg.dependencies[dep] && !pkg.devDependencies?.[dep]) {
        console.error(`‚ùå Depend√™ncia cr√≠tica ${dep} n√£o encontrada`);
        return false;
      }
    }
    
    console.log('‚úÖ Depend√™ncias cr√≠ticas OK');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao verificar depend√™ncias:', error);
    return false;
  }
}

async function runPreDeployCheck() {
  console.log('üöÄ Iniciando verifica√ß√£o pr√©-deploy...\n');
  
  const checks = [
    checkEnvironmentVariables,
    checkDatabaseConnection,
    checkRequiredDirectories,
    checkThemeConfiguration,
    checkDependencies
  ];
  
  let allChecksPassed = true;
  
  for (const check of checks) {
    try {
      const result = await check();
      if (!result) {
        allChecksPassed = false;
      }
    } catch (error) {
      console.error(`‚ùå Erro durante verifica√ß√£o:`, error);
      allChecksPassed = false;
    }
    console.log(''); // Linha em branco para separar as verifica√ß√µes
  }
  
  if (allChecksPassed) {
    console.log('üéâ Todas as verifica√ß√µes passaram! Sistema pronto para deploy.');
    process.exit(0);
  } else {
    console.log('‚ùå Algumas verifica√ß√µes falharam. Corrija os problemas antes do deploy.');
    process.exit(1);
  }
}

// Executa as verifica√ß√µes se este script foi chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  runPreDeployCheck();
}

export { runPreDeployCheck };